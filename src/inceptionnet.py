# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/inceptionnet.ipynb.

# %% auto 0
__all__ = ['InceptionModuleConfig', 'InceptionModule', 'InceptionNet']

# %% ../notebooks/inceptionnet.ipynb 1
import torch
import torchvision
import torch.nn as nn
from typing import List
from dataclasses import dataclass

# %% ../notebooks/inceptionnet.ipynb 2
@dataclass(frozen=True)
class InceptionModuleConfig:
    conv1x1: int
    conv1x1_3: int
    conv3x3: int
    conv1x1_5: int
    conv5x5: int
    conv1x1_max:int 

class InceptionModule(nn.Module):
    def __init__(self, in_channels: int, out_channels: InceptionModuleConfig):
        super().__init_()

        self.conv1x1_ = nn.Conv2d(in_channels, out_channels.conv1x1, kernel_size=1)

        self.conv1x1_3 = nn.Conv2d(in_channels, out_channels.conv1x1_3, kernel_size=1)
        self.conv3x3 = nn.Conv2d(out_channels.conv1x1_3, out_channels.conv3x3, kernel_size=3, padding=1)

        self.conv1x1_5 = nn.Conv2d(in_channels, out_channels.conv1x1_5, kernel_size=1)
        self.conv5x5 = nn.Conv2d(out_channels.conv1x1_5, out_channels.conv5x5, kernel_size=5, padding=2)

        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=1, padding=1)
        self.conv1x1_max = nn.Conv2d(in_channels, out_channels.conv1x1_max, kernel_size=1)

    def forward(self, X):
        X1 = self.conv1x1_(X)
        print("\t\tAfter conv1x1_:", X1.shape)

        X2 = self.conv1x1_3(X)
        print("\t\tAfter conv1x1_3:", X2.shape)
        X2 = self.conv3x3(X2)
        print("\t\tAfter conv3x3:", X2.shape)

        X3 = self.conv1x1_5(X)
        print("\t\tAfter conv1x1_5:", X3.shape)
        X3 = self.conv5x5(X3)
        print("\t\tAfter conv5x5:", X3.shape)

        X4 = self.maxpool(X)
        print("\t\tAfter maxpool:", X4.shape)
        X4 = self.conv1x1_max(X4)
        print("\t\tAfter conv1x1_max:", X4.shape)
        
        X = torch.cat((X1, X2, X3, X4), dim=1)
        print("\t\tAfter concatenation:", X.shape)

        return X

# %% ../notebooks/inceptionnet.ipynb 4
class InceptionNet(nn.Module):
    def __init__(self):
        super().__init__()

        # stem
        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2)
        self.max_pool1 = nn.MaxPool2d(kernel_size=3, stride=2)

        self.conv2 = nn.Conv2d(64, 192, kernel_size=7, stride=2)
        self.max_pool2 = nn.MaxPool2d(kernel_size=3, stride=2)

        # inception
        self.inception3a = InceptionModule(
            in_channels=192,
            out_channels=InceptionModuleConfig(
                conv1x1=64,
                conv1x1_3=96,
                conv3x3=128,
                conv1x1_5=32,
                conv5x5=32,
                conv1x1_max=32,
            ),
        )
        self.inception3b = InceptionModule(
            in_channels=256,
            out_channels=InceptionModuleConfig(
                conv1x1=128,
                conv1x1_3=128,
                conv3x3=192,
                conv1x1_5=32,
                conv5x5=96,
                conv1x1_max=64,
            ),
        )

        self.max_pool3 = nn.MaxPool2d(kernel_size=3, stride=2)

        self.inception4a = InceptionModule(
            in_channels=480,
            out_channels=InceptionModuleConfig(
                conv1x1=192,
                conv1x1_3=96,
                conv3x3=208,
                conv1x1_5=16,
                conv5x5=48,
                conv1x1_max=64,
            ),
        )
        self.inception4b = InceptionModule(
            in_channels=512,
            out_channels=InceptionModuleConfig(
                conv1x1=160,
                conv1x1_3=112,
                conv3x3=224,
                conv1x1_5=24,
                conv5x5=64,
                conv1x1_max=64,
            ),
        )
        self.inception4c = InceptionModule(
            in_channels=512,
            out_channels=InceptionModuleConfig(
                conv1x1=128,
                conv1x1_3=128,
                conv3x3=256,
                conv1x1_5=24,
                conv5x5=64,
                conv1x1_max=64,
            ),
        )
        self.inception4d = InceptionModule(
            in_channels=512,
            out_channels=InceptionModuleConfig(
                conv1x1=112,
                conv1x1_3=144,
                conv3x3=288,
                conv1x1_5=32,
                conv5x5=128,
                conv1x1_max=128,
            ),
        )
        self.inception4e = InceptionModule(
            in_channels=528,
            out_channels=InceptionModuleConfig(
                conv1x1=256,
                conv1x1_3=160,
                conv3x3=320,
                conv1x1_5=32,
                conv5x5=128,
                conv1x1_max=128,
            ),
        )

        self.max_pool4 = nn.MaxPool2d(kernel_size=3, stride=2)

        self.inception5a = InceptionModule(
            in_channels=832,
            out_channels=InceptionModuleConfig(
                conv1x1=256,
                conv1x1_3=160,
                conv3x3=320,
                conv1x1_5=32,
                conv5x5=128,
                conv1x1_max=128,
            ),
        )
        self.inception5b = InceptionModule(
            in_channels=832,
            out_channels=InceptionModuleConfig(
                conv1x1=384,
                conv1x1_3=192,
                conv3x3=384,
                conv1x1_5=48,
                conv5x5=128,
                conv1x1_max=128,
            ),
        )

        # tail
        self.avg_pool = nn.AdaptiveAvgPool2d((1,1))
        self.dropout = nn.Dropout2d(p=0.4)
        self.fc = nn.Linear(1024, 1000)

    def forward(self, X):
        print("Input shape:", X.shape)
        X = self.conv1(X)
        print("After conv1:", X.shape)
        X = self.max_pool1(X)
        print("After max_pool1:", X.shape)

        X = self.conv2(X)
        print("After conv2:", X.shape)
        X = self.max_pool2(X)
        print("After max_pool2:", X.shape)

        X = self.inception3a(X)
        print("After inception3a:", X.shape)
        X = self.inception3b(X)
        print("After inception3b:", X.shape)

        X = self.max_pool3(X)
        print("After max_pool3:", X.shape)

        X = self.inception4a(X)
        print("After inception4a:", X.shape)
        X = self.inception4b(X)
        print("After inception4b:", X.shape)
        X = self.inception4c(X)
        print("After inception4c:", X.shape)
        X = self.inception4d(X)
        print("After inception4d:", X.shape)
        X = self.inception4e(X)
        print("After inception4e:", X.shape)

        X = self.max_pool4(X)
        print("After max_pool4:", X.shape)

        X = self.inception5a(X)
        print("After inception5a:", X.shape)
        X = self.inception5b(X)
        print("After inception5b:", X.shape)

        X = self.avg_pool(X)
        print("After avg_pool:", X.shape)
        X = self.dropout(X)
        print("After dropout:", X.shape)
        X = torch.flatten(X, 1)
        print("After flatten:", X.shape)
        X = self.fc(X)
        print("After fc:", X.shape)

        return X
